import streamlit as st
import json
import pandas as pd
import plotly.express as px
from io import BytesIO
import PIL.Image
import plotly.io as pio

# ржкрзЗржЬ рж╕рзЗржЯржЖржк
st.set_page_config(page_title="рждрж╛ржкржорж╛рждрзНрж░рж╛рж░ ржбрзЗржЯрж╛", layout="wide")

# ржнрж╛рж╖рж╛ ржирж┐рж░рзНржмрж╛ржЪржи
language = st.sidebar.radio("ржнрж╛рж╖рж╛ ржирж┐рж░рзНржмрж╛ржЪржи ржХрж░рзБржи / Select Language", ["ржмрж╛ржВрж▓рж╛", "English"])
def t(bangla, english): return bangla if language == "ржмрж╛ржВрж▓рж╛" else english

st.title(t("ЁЯМбя╕П рждрж╛ржкржорж╛рждрзНрж░рж╛рж░ JSON ржбрзЗржЯрж╛ ржнрж┐ржЬрзБржпрж╝рж╛рж▓рж╛ржЗржЬрж╛рж░", "ЁЯМбя╕П Temperature JSON Data Visualizer"))

# ржлрж╛ржЗрж▓ ржЖржкрж▓рзЛржб
uploaded_file = st.file_uploader(t("ЁЯУВ JSON ржлрж╛ржЗрж▓ ржЖржкрж▓рзЛржб ржХрж░рзБржи", "ЁЯУВ Upload JSON File"), type=["json"])

if uploaded_file:
    try:
        data = json.load(uploaded_file)
        df = pd.DataFrame(data["data"])
        df["time"] = pd.to_datetime(df["time"])

        st.success(t("тЬЕ ржбрзЗржЯрж╛ ржЖржкрж▓рзЛржб рж╣ржпрж╝рзЗржЫрзЗ!", "тЬЕ Data uploaded successfully!"))

        # Scroll рж╕рж╣ DataFrame
        st.dataframe(df, use_container_width=True, height=400)

        metrics = df.columns.drop("time").tolist()
        selected_metric = st.selectbox(t("ЁЯУК ржорзЗржЯрзНрж░рж┐ржХ ржирж┐рж░рзНржмрж╛ржЪржи ржХрж░рзБржи", "ЁЯУК Select Metric"), metrics)

        # рждрж╛рж░рж┐ржЦ ржирж┐рж░рзНржмрж╛ржЪржи
        start_date = st.date_input(t("рж╢рзБрж░рзБрж░ рждрж╛рж░рж┐ржЦ", "Start Date"), value=df["time"].min())
        end_date = st.date_input(t("рж╢рзЗрж╖ рждрж╛рж░рж┐ржЦ", "End Date"), value=df["time"].max())

        filtered_df = df[(df["time"] >= pd.to_datetime(start_date)) & (df["time"] <= pd.to_datetime(end_date))]

        st.subheader(t("ЁЯУИ ржкрзНрж▓ржЯ ржЯрж╛ржЗржк:", "ЁЯУИ Plot Type:"))
        col1, col2, col3 = st.columns(3)
        fig = None

        # тЬЕ ржЙржирзНржиржд scrollbar ржлрж╛ржВрж╢ржи
        def add_scrollbar(fig):
            if len(filtered_df) >= 100:
                fig.update_xaxes(
                    rangeslider_visible=True,
                    rangeslider_thickness=0.1,
                    rangeslider_bgcolor='rgba(200,200,200,0.3)',
                    rangeslider_bordercolor='gray',
                    rangeslider_borderwidth=1,
                )
            else:
                fig.update_xaxes(rangeslider_visible=False)

            fig.update_layout(
                dragmode='zoom',
                hovermode='x unified',
                xaxis=dict(fixedrange=False),
                yaxis=dict(fixedrange=False)
            )
            return fig

        # ржмрж╛рж░ ржкрзНрж▓ржЯ
        if col1.button(t("ЁЯУК ржмрж╛рж░ ржкрзНрж▓ржЯ", "ЁЯУК Bar Plot")):
            fig = px.bar(filtered_df, x="time", y=selected_metric, title=f"{selected_metric} - Bar Plot")
            fig = add_scrollbar(fig)
            st.plotly_chart(fig, use_container_width=True)

        # рж╕рзНржХрзНржпрж╛ржЯрж╛рж░ ржкрзНрж▓ржЯ
        if col2.button(t("ЁЯФ╕ рж╕рзНржХрзНржпрж╛ржЯрж╛рж░ ржкрзНрж▓ржЯ", "ЁЯФ╕ Scatter Plot")):
            fig = px.scatter(filtered_df, x="time", y=selected_metric, title=f"{selected_metric} - Scatter Plot")
            fig = add_scrollbar(fig)
            st.plotly_chart(fig, use_container_width=True)

        # рж▓рж╛ржЗржи ржкрзНрж▓ржЯ
        if col3.button(t("ЁЯУИ рж▓рж╛ржЗржи ржкрзНрж▓ржЯ", "ЁЯУИ Line Plot")):
            fig = px.line(filtered_df, x="time", y=selected_metric, title=f"{selected_metric} - Line Plot")
            fig = add_scrollbar(fig)
            st.plotly_chart(fig, use_container_width=True)

        # ржкрзНрж▓ржЯ ржкрзНрж░рж┐ржнрж┐ржЙ ржУ ржбрж╛ржЙржирж▓рзЛржб
        if fig:
            img_bytes = fig.to_image(format="png", engine="kaleido")  # kaleido ржЗржЮрзНржЬрж┐ржи
            image = PIL.Image.open(BytesIO(img_bytes))


            # ржбрж╛ржЙржирж▓рзЛржб ржмрж╛ржЯржи
            st.download_button(
                label=t("тмЗя╕П ржкрзНрж▓ржЯ ржбрж╛ржЙржирж▓рзЛржб ржХрж░рзБржи", "тмЗя╕П Download Plot"),
                data=img_bytes,
                file_name=f"{selected_metric}_plot.png",
                mime="image/png"
            )

    except Exception as e:
        st.error(t(f"тЭМ ржбрзЗржЯрж╛ ржкрзЬрж╛рж░ рж╕ржорж╕рзНржпрж╛ рж╣рзЯрзЗржЫрзЗ: {e}", f"тЭМ Error reading data: {e}"))

else:
    st.info(t("ЁЯСЖ ржЙржкрж░рзЗ JSON ржлрж╛ржЗрж▓ ржЖржкрж▓рзЛржб ржХрж░рзБржиред", "ЁЯСЖ Upload a JSON file above."))
