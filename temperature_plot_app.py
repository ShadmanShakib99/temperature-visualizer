import streamlit as st
import json
import pandas as pd
import matplotlib.pyplot as plt
from io import BytesIO

st.set_page_config(page_title="рждрж╛ржкржорж╛рждрзНрж░рж╛рж░ ржбрзЗржЯрж╛ / Temperature Data", layout="wide")

language = st.sidebar.radio("ржнрж╛рж╖рж╛ ржирж┐рж░рзНржмрж╛ржЪржи ржХрж░рзБржи / Select Language", ["ржмрж╛ржВрж▓рж╛", "English"])

def t(bangla_text, english_text):
    return bangla_text if language == "ржмрж╛ржВрж▓рж╛" else english_text

st.title(t("ЁЯМбя╕П рждрж╛ржкржорж╛рждрзНрж░рж╛рж░ JSON ржбрзЗржЯрж╛ ржнрж┐ржЬрзБржпрж╝рж╛рж▓рж╛ржЗржЬрж╛рж░", "ЁЯМбя╕П Temperature JSON Data Visualizer"))

uploaded_file = st.file_uploader(t("ЁЯУВ JSON ржлрж╛ржЗрж▓ ржЖржкрж▓рзЛржб ржХрж░рзБржи", "ЁЯУВ Upload JSON File"), type=["json"])

# ржкрзНрж▓ржЯ рж╕ржмрж╕ржорзЯ ржПржЗ рж╕рж╛ржЗржЬрзЗрж░ рж╣ржмрзЗ
def get_fig_size(num_points):
    return (12, 5)

scroll_style = """
<style>
.scroll-div {
    overflow-x: auto;
    white-space: nowrap;
    border: 1px solid #ccc;
    padding: 5px;
}
</style>
"""

st.markdown(scroll_style, unsafe_allow_html=True)

if uploaded_file is not None:
    try:
        data = json.load(uploaded_file)
        df = pd.DataFrame(data["data"])
        df['time'] = pd.to_datetime(df['time'])

        st.success(t("тЬЕ ржбрзЗржЯрж╛ ржЖржкрж▓рзЛржб рж╣рзЯрзЗржЫрзЗ!", "тЬЕ Data uploaded successfully!"))
        st.dataframe(df, use_container_width=True)

        metrics = df.columns.drop('time').tolist()
        selected_metric = st.selectbox(t("ржорзЗржЯрзНрж░рж┐ржХ ржирж┐рж░рзНржмрж╛ржЪржи ржХрж░рзБржи", "Select Metric"), metrics)

        start_date = st.date_input(t("рж╢рзБрж░рзБ рждрж╛рж░рж┐ржЦ", "Start Date"), value=df['time'].min())
        end_date = st.date_input(t("рж╢рзЗрж╖ рждрж╛рж░рж┐ржЦ", "End Date"), value=df['time'].max())

        filtered_df = df[(df['time'] >= pd.to_datetime(start_date)) & (df['time'] <= pd.to_datetime(end_date))]

        st.subheader(t("ЁЯУИ ржкрзНрж▓ржЯ ржЯрж╛ржЗржк ржирж┐рж░рзНржмрж╛ржЪржи ржХрж░рзБржи:", "ЁЯУИ Select Plot Type:"))
        plot_placeholder = st.empty()
        col1, col2, col3 = st.columns(3)

        fig = None  # ржкрзНрж▓ржЯ рж╕ржВрж░ржХрзНрж╖ржгрзЗрж░ ржЬржирзНржп

        if col1.button(t("ЁЯУК ржмрж╛рж░ ржкрзНрж▓ржЯ", "ЁЯУК Bar Plot")):
            fig, ax = plt.subplots(figsize=get_fig_size(len(filtered_df)))
            ax.bar(filtered_df['time'], filtered_df[selected_metric], width=0.02)
            ax.set_title(t(f"{selected_metric} (ржмрж╛рж░ ржкрзНрж▓ржЯ)", f"{selected_metric} (Bar Plot)"))
            ax.set_xlabel(t("рж╕ржоржпрж╝", "Time"))
            ax.set_ylabel(selected_metric)
            plt.xticks(rotation=45, ha='right')
            plt.tight_layout()
            with plot_placeholder.container():
                st.markdown('<div class="scroll-div">', unsafe_allow_html=True)
                st.pyplot(fig)
                st.markdown('</div>', unsafe_allow_html=True)

        if col2.button(t("ЁЯФ╕ рж╕рзНржХрзНржпрж╛ржЯрж╛рж░ ржкрзНрж▓ржЯ", "ЁЯФ╕ Scatter Plot")):
            fig, ax = plt.subplots(figsize=get_fig_size(len(filtered_df)))
            ax.scatter(filtered_df['time'], filtered_df[selected_metric], color='red', s=50, alpha=0.7)
            ax.set_title(t(f"{selected_metric} (рж╕рзНржХрзНржпрж╛ржЯрж╛рж░ ржкрзНрж▓ржЯ)", f"{selected_metric} (Scatter Plot)"))
            ax.set_xlabel(t("рж╕ржоржпрж╝", "Time"))
            ax.set_ylabel(selected_metric)
            plt.xticks(rotation=45, ha='right')
            plt.tight_layout()
            with plot_placeholder.container():
                st.markdown('<div class="scroll-div">', unsafe_allow_html=True)
                st.pyplot(fig)
                st.markdown('</div>', unsafe_allow_html=True)

        if col3.button(t("ЁЯУИ рж▓рж╛ржЗржи ржкрзНрж▓ржЯ", "ЁЯУИ Line Plot")):
            fig, ax = plt.subplots(figsize=get_fig_size(len(filtered_df)))
            ax.plot(filtered_df['time'], filtered_df[selected_metric], color='green', marker='o')
            ax.set_title(t(f"{selected_metric} (рж▓рж╛ржЗржи ржкрзНрж▓ржЯ)", f"{selected_metric} (Line Plot)"))
            ax.set_xlabel(t("рж╕ржоржпрж╝", "Time"))
            ax.set_ylabel(selected_metric)
            plt.xticks(rotation=45, ha='right')
            plt.tight_layout()
            with plot_placeholder.container():
                st.markdown('<div class="scroll-div">', unsafe_allow_html=True)
                st.pyplot(fig)
                st.markdown('</div>', unsafe_allow_html=True)

        # ржпржжрж┐ ржкрзНрж▓ржЯ рждрзИрж░рж┐ рж╣рзЯ, рждрж╛рж╣рж▓рзЗ ржбрж╛ржЙржирж▓рзЛржб ржмрж╛ржЯржи ржжрзЗржЦрж╛ржУ
        if fig is not None:
            buf = BytesIO()
            fig.savefig(buf, format="png", bbox_inches='tight')
            buf.seek(0)

            st.download_button(
                label=t("тмЗя╕П ржкрзНрж▓ржЯ ржбрж╛ржЙржирж▓рзЛржб ржХрж░рзБржи", "тмЗя╕П Download Plot"),
                data=buf,
                file_name=f"{selected_metric}_plot.png",
                mime="image/png"
            )

    except Exception as e:
        st.error(t(f"тЭМ ржбрзЗржЯрж╛ ржкрзЬрж╛рж░ рж╕ржорж╕рзНржпрж╛ рж╣рзЯрзЗржЫрзЗ: {e}", f"тЭМ Error reading data: {e}"))
else:
    st.info(t("ЁЯСЖ ржЙржкрж░рзЗ JSON ржлрж╛ржЗрж▓ ржЖржкрж▓рзЛржб ржХрж░рзБржиред", "ЁЯСЖ Upload a JSON file above."))
